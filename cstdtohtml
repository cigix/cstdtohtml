#!/usr/bin/env python3

import os
import subprocess
import sys

import htmlwriter
import linker
import pages
import utils
from toc import TOC, TOCMatcher

def pdftotext(file):
    '''pdftotext(file): Run the file through `pdftotext -layout`.

    If the subprocess fails, its stderr gets printed to stderr, and its return
    status is passed to sys.exit().

    Parameters:
        - file: str, path to the PDF file

    Return: str, stdout of the subprocess.'''
    process = subprocess.run(["pdftotext", "-layout", file, "-"],
                             capture_output=True, text=True)
    if process.returncode != 0:
        print(process.stderr, end='', file=sys.stderr)
        sys.exit(process.returncode)
    return process.stdout

def texttohtml(text):
    '''texttohtml(text): Turn the PDF text into HTML.

    Parse the text into pages, then elements, then turn them into HTML tags.

    Parameters:
        - text: str, the text of the PDF

    Return: str, a HTML document'''
    unstructuredpages = [pages.Page(p) for p in text.split('\f') if p]
    isostd = unstructuredpages[0].header[0].split('â€”')[0]

    coverbegin = 0
    # The cover and the first page of content have a common subheader
    front_header = utils.groupwords(unstructuredpages[coverbegin].content[0])
    tocbegin = coverbegin + 1
    # There is an empty page between cover and ToC
    while (unstructuredpages[tocbegin].content
           and unstructuredpages[tocbegin].content[0].lstrip() != "Contents"):
        tocbegin += 1
    forewordbegin = tocbegin + 1
    while unstructuredpages[forewordbegin].content[0].lstrip() != "Foreword":
        forewordbegin += 1
    introbegin = forewordbegin + 1
    while unstructuredpages[introbegin].content[0].lstrip() != "Introduction":
        introbegin += 1
    contentsbegin = introbegin + 1
    while (utils.groupwords(unstructuredpages[contentsbegin].content[0])
           != front_header):
        contentsbegin += 1
    bibliobegin = contentsbegin + 1
    while unstructuredpages[bibliobegin].content[0].lstrip() != "Bibliography":
        bibliobegin += 1
    indexbegin = bibliobegin + 1

    coverupages = unstructuredpages[coverbegin:tocbegin]
    tocupages = unstructuredpages[tocbegin:forewordbegin]
    forewordupages = unstructuredpages[forewordbegin:introbegin]
    introupages = unstructuredpages[introbegin:contentsbegin]
    contentsupages = unstructuredpages[contentsbegin:bibliobegin]
    biblioupages = unstructuredpages[bibliobegin:indexbegin]

    toc = TOC(tocupages)
    # remove Index
    toc.titles.pop()
    tocmatcher = TOCMatcher(toc)

    # Structured pages
    cover = [pages.CoverPage(coverupages[0], tocmatcher)]
    cover += [pages.StructuredPage(p, tocmatcher) for p in coverupages[1:]]
    foreword = [pages.StructuredPage(p, tocmatcher) for p in forewordupages]
    intro = [pages.StructuredPage(p, tocmatcher) for p in introupages]
    contents = [pages.CoverPage(contentsupages[0], tocmatcher)]
    contents += [pages.StructuredPage(p, tocmatcher)
                 for p in contentsupages[1:]]
    biblio = [pages.StructuredPage(p, tocmatcher) for p in biblioupages]

    for i, p in enumerate(contents):
        p.reindentcodes()
        p.reworkfootnotes()
        p.fixfootnoterefs()
        p.putfootnoteplaceholders()

    covermerged = pages.mergepages(cover)
    forewordmerged = pages.mergepages(foreword)
    intromerged = pages.mergepages(intro)
    content = pages.mergepages(contents)
    bibliomerged = pages.mergepages(biblio)

    linker.putlinksplaceholders(covermerged.elements)
    linker.putlinksplaceholders(forewordmerged.elements)
    linker.putlinksplaceholders(intromerged.elements)
    linker.putlinksplaceholders(content.elements)
    for elems in content.footnotes.values():
        linker.putlinksplaceholders(elems)
    linker.putlinksplaceholders(bibliomerged.elements)

    # HTML
    header = htmlwriter.Tag("header", [htmlwriter.Tag("div", h)
                                       for h in front_header])
    body = htmlwriter.Tag("body", header)

    donefootnotes = set()
    donefootnotes |= htmlwriter.eatStructuredPage(body, covermerged)
    htmlwriter.eatTOC(body, toc)
    donefootnotes |= htmlwriter.eatStructuredPage(body, forewordmerged)
    donefootnotes |= htmlwriter.eatStructuredPage(body, intromerged)
    donefootnotes |= htmlwriter.eatStructuredPage(body, content)
    donefootnotes |= htmlwriter.eatStructuredPage(body, bibliomerged)

    allfootnotes = set(content.footnotes.keys())
    todofootnotes = allfootnotes - donefootnotes

    if todofootnotes:
        body.add(htmlwriter.Tag("hr /"))
        body.add(htmlwriter.Tag("i", "Footnotes should be at the end of the"
            " sections they appear in, but it seems we did not find those:"))

        htmlwriter.eatfootnotes(body, {
                footnote: elems
                for footnote, elems in content.footnotes.items()
                if footnote in todofootnotes
            })

    html = f"""<!DOCTYPE html>
<html lang="en">
<!-- This document was generated automatically by cstdtohtml -->
<head>
  <meta charset="utf-8">
  <title>{isostd}</title>
</head>
{body.tohtml()}</html>
"""

    return html

def main(argv):
    usagestr = ("Usage: " + os.path.basename(argv[0]) +
                " <C Standard Draft PDF file> [output HTML file]")
    if not 1 < len(argv) < 4:
        print(usagestr, file=sys.stderr)
        return 1
    if argv[1] in ["-h", "-help", "--help"]:
        print(usagestr)
        return 0
    inputfile = argv[1]
    if len(argv) == 3:
        outputfile = argv[2]
    else:
        outputfile = os.path.splitext(inputfile)[0] + ".html"

    text = pdftotext(inputfile)
    # for debugging purposes
    #with open(".cstdtohtml_raw", 'w') as f:
    #    f.write(text)
    html = texttohtml(text)
    with open(outputfile, "wt") as out:
        out.write(html)
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
